const MINIMUM_KEY_LENGTH = 1;
const MAXIMUM_KEY_LENGTH = 13;
const CHARACTERS_PER_LINE = 200;
//const cipherText = "F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794";

const cipherText

// Separate the cipherText into pairs (we're assuming it's ASCII, i.e. pairs of hex digits)
cipherChars = cipherText.match(/.{1,2}/g);

const possibleKeyLengths =  [...new Array(MAXIMUM_KEY_LENGTH + 1).keys()].filter(n=>n>=MINIMUM_KEY_LENGTH);
const possibleCharacters =  [...new Array(256).keys()];
const setOfLowerCaseLetterKeyCodes = [...new Array(122 + 1).keys()].filter(n=>n>=97);

console.log(cipherChars.length + " characters of ciphertext provided. \n");
var keyLength = getKeyLength();


// To determine the correct character for each index in the key, we want to first eliminate all those characters whose
// use would result in text outside the printable ASCII range (32-127) (this is an assumption)
var key = [];
var congruentChars = [];
for(var i=0;i < keyLength;i++) {
    // Create an array of all possible characters at each index in the key
    congruentChars[i] = [];
    key[i] = possibleCharacters.slice();
}

// Create a list of all characters congruent (at the same offset % keyLength) to each other
cipherChars.forEach((c,i) =>{ congruentChars[i % keyLength].push(parseInt(c, 16)) });

congruentChars.forEach(function(observedCharacters, position){
    console.log("\nRemoving keys that would result in unprintable characters in position " + position + "...");

    // Filter out any possible keys that would result in values outside the printable ASCII range
    //console.log(key[position].length + " possible, removing those that would result in values < 32...");
    /*key[position] = key[position].filter((possibleValue) => {
        return observedCharacters.every(c => (c ^ possibleValue) >= 32)
    });

    //console.log(key[position].length + " possible, removing those that would result in values > 127...");

    key[position] = key[position].filter((possibleValue) => {
        return observedCharacters.every(c => (c ^ possibleValue) <= 127)
    });*/

    console.log('Number of possible characters at position ' + position + ' is now ' + key[position].length + ' (from 256)');

   // console.log('Checking probability distribution of remaining keys...');

    var sums = [];
    // For each possible key character at this position
    key[position].forEach(function(testChar) {
        var counters = [];
        possibleCharacters.forEach(c => counters[c] = 0);
        // Filter out characters that aren't lowercase letters
        var lowercaseCongruentLetters = observedCharacters.filter(c => setOfLowerCaseLetterKeyCodes.indexOf(c ^ testChar) !== -1);

        // Create a counter in counters[c ^ testChar] for every lowercase letter
        // i.e. counters[97] will be the count of occurrences of 'a' (97) when testChar is used as the key
        //console.log(lowercaseCongruentLetters);
        lowercaseCongruentLetters.forEach(c => typeof counters[c ^ testChar] == 'undefined' ? counters[c ^ testChar] = 1 : counters[c ^ testChar]++);

        var probabilities = counters.filter((c) => typeof c !== 'undefined').map(n => n / lowercaseCongruentLetters.length);

        sums[testChar] = probabilities.map(c=>c).reduce((m,p)=>m+(p*p), 0);
    });

    var mostLikelyOffsets = [];
    sums.forEach((s,i) => { mostLikelyOffsets.push({ i: i, sum: s }) } );

    mostLikelyOffsets = mostLikelyOffsets.sort((a,b) => a.sum - b.sum).slice(0,10);

    console.log("\nMost likely offsets for position " + position + ":");
    mostLikelyOffsets.forEach(offset => {
       console.log(offset.i + " (0x" + offset.i.toString(16).toUpperCase() +  ") (sum: " + offset.sum + ")")
    });

    key[position] = key[position].filter(c => mostLikelyOffsets.some(o => o.i == c));
});

console.log("\nOverall likely offsets table:");
console.log(key);

console.log("Press any key to enter investigation mode. 'x' to exit.")
var Wheel = function () {
    var wheel = Object.create(Wheel.prototype);
    wheel.positions = [];

    for(var i = 0; i < keyLength; i++) {
        wheel.positions[i] = 0;
    }

    wheel.getKey = function(nice) {
        var testKey = [];
        wheel.positions.forEach((rotation, i) => {
            testKey.push(key[i][rotation]);
        });
        if(nice) {
            return testKey.map(c => c.toString(16).toUpperCase()).join('-');
        } else {
            return testKey;
        }
    };

    wheel.decode = function() {
        var plaintextKeycodes = [];

        var testKey = wheel.getKey();

        cipherChars.forEach((ch, i) => {
            var c = parseInt(ch, 16);
            var k = testKey[i % testKey.length];
            plaintextKeycodes.push(c ^ k);
        });

        return plaintextKeycodes.map(k => String.fromCharCode(k)).join("");
        //return plaintextKeycodes.join(",");
    };

    return wheel;
};


var stdin = process.openStdin();
var wheel = new Wheel();
stdin.addListener("data", function(d) {
    const input = d.toString().trim();
    const inputInt = parseInt(input) - 1;

    if(inputInt >= 0 && inputInt < keyLength) {
        console.log("\n\n");

        // If this falls in the range of key lengths, treat it as an instruction to progress the "wheel" one turn
        // on the key character at this index (starting from 0)
        if(wheel.positions[inputInt] + 1 == key[inputInt].length) {
            wheel.positions[inputInt] = 0;
        } else {
            wheel.positions[inputInt]++;
        }

        console.log("Current Rotations:");
        console.log(wheel.positions.toString() + " (1-indexed; enter an index to rotate)");
        console.log(wheel.getKey(true));

        var plaintext = wheel.decode();
        for(var i=0; i<=plaintext.length; i += CHARACTERS_PER_LINE) {
            console.log('');
            console.log(plaintext.slice(i, Math.min(i + CHARACTERS_PER_LINE, plaintext.length - 1)));
            console.log([...new Array(i + CHARACTERS_PER_LINE).keys()].filter(n=>n>=i).map(c => (c % keyLength) + 1).join(''));//.map(n=>(n%keyLength).toString()).join(""));
        }
    } else if(input.toLowerCase() == "x") {
        process.exit();
    }

});

function getKeyLength() {
    const counters = [];
    var sums = {};

    possibleKeyLengths.forEach(l => {
        counters[l] = [];
        // Create a counter for every possible character
        possibleCharacters.forEach(c => counters[l][c] = 0);

        // Dunno what to call this, but the characters at the 0,N,2N positions
        var congruentChars = cipherChars.filter((c,i)=>i%l==0);

        // Count each variation
        congruentChars.forEach(c => counters[l][parseInt(c, 16)]++);

        // If the key length is N, then every Nth character of the plaintext is encrypted using the same shift.
        // If we take every Nth character and calculate frequencies, those frequencies should be in permuted order
        // If we take every Mth character and calculate frequencies, where M is not a multiple of N, those frequencies should be roughly uniform
        var totalOccurrences = counters[l].reduce((m,n)=>m+n,0);

        var probabilities = counters[l].map(n => n / totalOccurrences);

        sums[l] = probabilities.reduce((m,p)=>m+(p*p), 0);
    });

    var largestSum = { len: 0, val: 0.00 };

    console.log(sums);

    for(var s in sums)
        (sums[s] > largestSum.val) && (largestSum.val = sums[s]) && (largestSum.len = s);

    console.log("Length " + largestSum.len + " has the largest sum of squared probabilities (" + largestSum.val + ").");
    console.log("This is likely to be nonuniform, and therefore the correct key length.\n");

    return largestSum.len;
}



